#!/bin/bash -f
#############################################################
#
# A script for differential backup. You can make differential
# backups where you want to. The nomal usage of this script
# is discribed below:
#
# usage:
#   ./backup target distination
#
#############################################################

#############################################################
# Environmental Variables
#
# CMD    : a command for backup, default is `rsync`
# OPT    : options for $CMD, default is `-avz`
# EXCLUDE: a list of the filenames excluded in backup
#############################################################

### define command for backup
CMD="rsync"
OPT="-avz"

### define log directory
LOGDIR="/tmp"

### exclude rules
EXCLUDE_LIST=( \
		'.ecryptfs/' \
		'lost+found/' \
		'Cache/' \
		'.cache/' \
		'cache/' \
);
###


#############################################################
# User Defined Functions
#
#############################################################

### usage
usage()
{ # function to display usage
		cat <<EOF >&2

usage:
   ./backup targets destination
EOF
		exit -1;
}

### create a targets list
get_targets()
{
		while [ $# -gt 1 ]
		do
				if [[ ! ( -f ${1%/} || -d ${1%/} ) ]]; then
						echo "${0##*/}: cannot access ${1%/}: No such file or directory"
						echo "${0##*/}: abort backup procedure"
						usage; exit -1;
				fi
				if [[ ! ( -r ${1%/} ) ]]; then
						echo "${0##*/}: cannnot open directory ${1%/}: Permissoin denined"
						echo "${0##*/}: abort backup procedure"
						usage; exit -1;
				fi
				TARGETS=(${TARGETS[@]} ${1%/})
				shift
		done
		echo "# BACKUP TARGETS: ${TARGETS[@]}"
		return 1;
}

### set destination
set_destination()
{
		while [ $# -gt 1 ]; do shift; done;
		if [[ ! ( -d ${1%/} ) ]]; then
				echo "${0##*/}: cannot access ${1%/}: No such file or directory"
				echo "${0##*/}: abort backup procedure."
				usage; exit -1;
		fi
		if [[ ! ( -w ${1%/} ) ]]; then
				echo "${0##*/}: cannot backup in ${1%/}: Permission denied"
				echo "${0##*/}: abort backup procedure"
				usage; exit -1;
		fi
		DEST=${1%/}
		echo "# BACKUP DESTINATION: ${DEST}"
		return 1;
}


#############################################################
# Main Procedure
#
#############################################################

## check the number of arguments
if [ $# -le 1 ]; then
		echo "${0##*/}: unsufficient number of arguments"
		usage
fi

## startup message
TIMESTAMP=`date +%Y%m%d%H%M`
LOGFILE="${LOGDIR}/${USER}.backup${TIMESTAMP}.log"
exec > >(tee ${LOGFILE}) 2>&1

echo '###' `date` '###'
echo '# A differential backup script created by Ryou OHSAWA'
echo '#'

## set exclusion rules
for k in ${EXCLUDE_LIST[@]}
do
		EXCLUDE="${EXCLUDE} --exclude ${k}"
done

## set backup target names
get_targets $@
## set destination
set_destination $@

## search the latest backup folder
## if this finds the latest backup folder, this run rsync in
## differential backup mode (creating hardlink if files exist).
LATEST=`ls ${DEST} | sed -n '/bak$/p' | sort -n | tail -n 1`
LATEST="${DEST}/${LATEST}"
if [ ! -z "${LATEST}" ]
then
		LINK="--link-dest=${LATEST}"
		echo "# PREVIOUS BACKUP FILE: ${LATEST}"
fi

## backup folder
NEWBACKUP="${DEST}/${TIMESTAMP}.bak"
echo "# CURRENT BACKUP FILE: ${NEWBACKUP}"
echo ""

## do backup using rsync
for T in ${TARGETS[@]}
do
		${CMD} ${OPT} ${EXCLUDE} ${LINK} ${T} ${NEWBACKUP}
done

echo ""
echo "# BACKUP FINISHED"
echo "# BACKUP LOGFILE: ${LOGFILE}"
